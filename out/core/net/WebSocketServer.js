"use strict";
/** @format */
Object.defineProperty(exports, "__esModule", { value: true });
const ws_1 = require("ws");
class WebSocketServer extends ws_1.WebSocketServer {
    static INSTANCE;
    Logger;
    constructor(config, tkcore) {
        super({
            port: config.port,
            host: config.host,
        });
        this.Logger = tkcore.Logger.scope("Core.Net.UDPSocketServer");
        this.Logger.await(`Starting...`);
        this.on("close", this.onClose);
        this.on("error", this.onError);
        this.on("headers", this.onHeaders);
        this.on("connection", this.onConnection);
        this.on("listening", () => {
            this.Logger.listen(`WebSocketServer on ${config.host}:${config.port}`);
        });
    }
    static getInstance(config, tkcore) {
        if (!this.INSTANCE)
            this.INSTANCE = new WebSocketServer(config, tkcore);
        return this.INSTANCE;
    }
    onClose() {
        this.close();
    }
    onError(error) {
        this.Logger.error(`Server Error: ${error.stack}`);
    }
    onHeaders(headers, request) {
        this.Logger.debug(`WebSocketServer Headers: ${headers}`);
    }
    onConnection(websocket, request) {
        websocket.on("message", (data, bin) => this.onMessage(data, bin));
    }
    onMessage(data, isBinary) {
        this.Logger.message(data.toString());
    }
}
exports.default = WebSocketServer;
class Socket {
}
/**
 * TODO: Implement Socket.io for Websocket Server
 * make a class that contructs with a room name
 *
 */
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiV2ViU29ja2V0U2VydmVyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL2NvcmUvbmV0L1dlYlNvY2tldFNlcnZlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsY0FBYzs7QUFJZCwyQkFBNkU7QUFTN0UsTUFBTSxlQUFnQixTQUFRLG9CQUFnQjtJQUNyQyxNQUFNLENBQUMsUUFBUSxDQUFrQjtJQUNqQyxNQUFNLENBQXlCO0lBRXZDLFlBQW9CLE1BQTZCLEVBQUUsTUFBb0I7UUFDdEUsS0FBSyxDQUFDO1lBQ0wsSUFBSSxFQUFFLE1BQU0sQ0FBQyxJQUFJO1lBQ2pCLElBQUksRUFBRSxNQUFNLENBQUMsSUFBSTtTQUNqQixDQUFDLENBQUM7UUFDSCxJQUFJLENBQUMsTUFBTSxHQUFHLE1BQU0sQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLDBCQUEwQixDQUFDLENBQUM7UUFDOUQsSUFBSSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsYUFBYSxDQUFDLENBQUM7UUFFakMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxPQUFPLEVBQUUsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDO1FBQy9CLElBQUksQ0FBQyxFQUFFLENBQUMsT0FBTyxFQUFFLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUMvQixJQUFJLENBQUMsRUFBRSxDQUFDLFNBQVMsRUFBRSxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUM7UUFDbkMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxZQUFZLEVBQUUsSUFBSSxDQUFDLFlBQVksQ0FBQyxDQUFDO1FBQ3pDLElBQUksQ0FBQyxFQUFFLENBQUMsV0FBVyxFQUFFLEdBQUcsRUFBRTtZQUN6QixJQUFJLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxzQkFBc0IsTUFBTSxDQUFDLElBQUksSUFBSSxNQUFNLENBQUMsSUFBSSxFQUFFLENBQUMsQ0FBQztRQUN4RSxDQUFDLENBQUMsQ0FBQztJQUNKLENBQUM7SUFFTSxNQUFNLENBQUMsV0FBVyxDQUFDLE1BQTZCLEVBQUUsTUFBb0I7UUFDNUUsSUFBSSxDQUFDLElBQUksQ0FBQyxRQUFRO1lBQUUsSUFBSSxDQUFDLFFBQVEsR0FBRyxJQUFJLGVBQWUsQ0FBQyxNQUFNLEVBQUUsTUFBTSxDQUFDLENBQUM7UUFDeEUsT0FBTyxJQUFJLENBQUMsUUFBUSxDQUFDO0lBQ3RCLENBQUM7SUFFTyxPQUFPO1FBQ2QsSUFBSSxDQUFDLEtBQUssRUFBRSxDQUFDO0lBQ2QsQ0FBQztJQUVPLE9BQU8sQ0FBQyxLQUEyQjtRQUMxQyxJQUFJLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxpQkFBaUIsS0FBSyxDQUFDLEtBQUssRUFBRSxDQUFDLENBQUM7SUFDbkQsQ0FBQztJQUVPLFNBQVMsQ0FBQyxPQUFpQixFQUFFLE9BQXdCO1FBQzVELElBQUksQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLDRCQUE0QixPQUFPLEVBQUUsQ0FBQyxDQUFDO0lBQzFELENBQUM7SUFFTyxZQUFZLENBQUMsU0FBb0IsRUFBRSxPQUF3QjtRQUNsRSxTQUFTLENBQUMsRUFBRSxDQUFDLFNBQVMsRUFBRSxDQUFDLElBQUksRUFBRSxHQUFHLEVBQUUsRUFBRSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxFQUFFLEdBQUcsQ0FBQyxDQUFDLENBQUM7SUFDbkUsQ0FBQztJQUVPLFNBQVMsQ0FBQyxJQUFhLEVBQUUsUUFBaUI7UUFDakQsSUFBSSxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQUM7SUFDdEMsQ0FBQztDQUNEO0FBRUQsa0JBQWUsZUFBZSxDQUFDO0FBRS9CLE1BQU0sTUFBTTtDQUFHO0FBRWY7Ozs7R0FJRyIsInNvdXJjZXNDb250ZW50IjpbIi8qKiBAZm9ybWF0ICovXHJcblxyXG5pbXBvcnQgVEsgZnJvbSBcIi4uLy4uXCI7XHJcbmltcG9ydCB7IEluY29taW5nTWVzc2FnZSB9IGZyb20gXCJodHRwXCI7XHJcbmltcG9ydCB7IFJhd0RhdGEsIFdlYlNvY2tldFNlcnZlciBhcyBfV2ViU29ja2V0U2VydmVyLCBXZWJTb2NrZXQgfSBmcm9tIFwid3NcIjtcclxuaW1wb3J0IFdlYlNvY2tldFNlcnZlckVycm9yIGZyb20gXCIuLi8uLi8uLi9zcmMvY29yZS9lcnJvci9XZWJTb2NrZXRTZXJ2ZXJFcnJvclwiO1xyXG5cclxuZXhwb3J0IGludGVyZmFjZSBXZWJTb2NrZXRTZXJ2ZXJDb25maWcge1xyXG5cdGRpc2FibGVkOiBib29sZWFuO1xyXG5cdHBvcnQ6IG51bWJlcjtcclxuXHRob3N0OiBzdHJpbmc7XHJcbn1cclxuXHJcbmNsYXNzIFdlYlNvY2tldFNlcnZlciBleHRlbmRzIF9XZWJTb2NrZXRTZXJ2ZXIge1xyXG5cdHByaXZhdGUgc3RhdGljIElOU1RBTkNFOiBXZWJTb2NrZXRTZXJ2ZXI7XHJcblx0cHJpdmF0ZSBMb2dnZXI6IFRLW1wiVEtDb3JlXCJdW1wiTG9nZ2VyXCJdO1xyXG5cclxuXHRwcml2YXRlIGNvbnN0cnVjdG9yKGNvbmZpZzogV2ViU29ja2V0U2VydmVyQ29uZmlnLCB0a2NvcmU6IFRLW1wiVEtDb3JlXCJdKSB7XHJcblx0XHRzdXBlcih7XHJcblx0XHRcdHBvcnQ6IGNvbmZpZy5wb3J0LFxyXG5cdFx0XHRob3N0OiBjb25maWcuaG9zdCxcclxuXHRcdH0pO1xyXG5cdFx0dGhpcy5Mb2dnZXIgPSB0a2NvcmUuTG9nZ2VyLnNjb3BlKFwiQ29yZS5OZXQuVURQU29ja2V0U2VydmVyXCIpO1xyXG5cdFx0dGhpcy5Mb2dnZXIuYXdhaXQoYFN0YXJ0aW5nLi4uYCk7XHJcblxyXG5cdFx0dGhpcy5vbihcImNsb3NlXCIsIHRoaXMub25DbG9zZSk7XHJcblx0XHR0aGlzLm9uKFwiZXJyb3JcIiwgdGhpcy5vbkVycm9yKTtcclxuXHRcdHRoaXMub24oXCJoZWFkZXJzXCIsIHRoaXMub25IZWFkZXJzKTtcclxuXHRcdHRoaXMub24oXCJjb25uZWN0aW9uXCIsIHRoaXMub25Db25uZWN0aW9uKTtcclxuXHRcdHRoaXMub24oXCJsaXN0ZW5pbmdcIiwgKCkgPT4ge1xyXG5cdFx0XHR0aGlzLkxvZ2dlci5saXN0ZW4oYFdlYlNvY2tldFNlcnZlciBvbiAke2NvbmZpZy5ob3N0fToke2NvbmZpZy5wb3J0fWApO1xyXG5cdFx0fSk7XHJcblx0fVxyXG5cclxuXHRwdWJsaWMgc3RhdGljIGdldEluc3RhbmNlKGNvbmZpZzogV2ViU29ja2V0U2VydmVyQ29uZmlnLCB0a2NvcmU6IFRLW1wiVEtDb3JlXCJdKSB7XHJcblx0XHRpZiAoIXRoaXMuSU5TVEFOQ0UpIHRoaXMuSU5TVEFOQ0UgPSBuZXcgV2ViU29ja2V0U2VydmVyKGNvbmZpZywgdGtjb3JlKTtcclxuXHRcdHJldHVybiB0aGlzLklOU1RBTkNFO1xyXG5cdH1cclxuXHJcblx0cHJpdmF0ZSBvbkNsb3NlKCkge1xyXG5cdFx0dGhpcy5jbG9zZSgpO1xyXG5cdH1cclxuXHJcblx0cHJpdmF0ZSBvbkVycm9yKGVycm9yOiBXZWJTb2NrZXRTZXJ2ZXJFcnJvcikge1xyXG5cdFx0dGhpcy5Mb2dnZXIuZXJyb3IoYFNlcnZlciBFcnJvcjogJHtlcnJvci5zdGFja31gKTtcclxuXHR9XHJcblxyXG5cdHByaXZhdGUgb25IZWFkZXJzKGhlYWRlcnM6IHN0cmluZ1tdLCByZXF1ZXN0OiBJbmNvbWluZ01lc3NhZ2UpIHtcclxuXHRcdHRoaXMuTG9nZ2VyLmRlYnVnKGBXZWJTb2NrZXRTZXJ2ZXIgSGVhZGVyczogJHtoZWFkZXJzfWApO1xyXG5cdH1cclxuXHJcblx0cHJpdmF0ZSBvbkNvbm5lY3Rpb24od2Vic29ja2V0OiBXZWJTb2NrZXQsIHJlcXVlc3Q6IEluY29taW5nTWVzc2FnZSkge1xyXG5cdFx0d2Vic29ja2V0Lm9uKFwibWVzc2FnZVwiLCAoZGF0YSwgYmluKSA9PiB0aGlzLm9uTWVzc2FnZShkYXRhLCBiaW4pKTtcclxuXHR9XHJcblxyXG5cdHByaXZhdGUgb25NZXNzYWdlKGRhdGE6IFJhd0RhdGEsIGlzQmluYXJ5OiBib29sZWFuKSB7XHJcblx0XHR0aGlzLkxvZ2dlci5tZXNzYWdlKGRhdGEudG9TdHJpbmcoKSk7XHJcblx0fVxyXG59XHJcblxyXG5leHBvcnQgZGVmYXVsdCBXZWJTb2NrZXRTZXJ2ZXI7XHJcblxyXG5jbGFzcyBTb2NrZXQge31cclxuXHJcbi8qKlxyXG4gKiBUT0RPOiBJbXBsZW1lbnQgU29ja2V0LmlvIGZvciBXZWJzb2NrZXQgU2VydmVyXHJcbiAqIG1ha2UgYSBjbGFzcyB0aGF0IGNvbnRydWN0cyB3aXRoIGEgcm9vbSBuYW1lXHJcbiAqXHJcbiAqL1xyXG4iXX0=