"use strict";
/**
 * Modules Entry File
 *
 * @format
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.ConfigBuilder = void 0;
const path_1 = require("path");
/***** Setup *****/
//const Logger = Toolkit.Logger.Mods.scope("Core/ConfigBuilder");
//Logger.start("Initializing");
class ConfigBuilder {
    RootDir = ""; //Toolkit.Paths.Config;
    Original;
    footer;
    version;
    file;
    id;
    constructor(module) {
        this.id = module.getID();
        this.version = module.getVersion();
        this.file = (0, path_1.join)(this.RootDir, `${this.id}.toml`);
        this.footer[0] = `# ANY EDITS PAST THIS LINE MAY NOT BE KEPT`;
        this.footer[1] = `Module/Config Version: ${this.version}`;
    }
}
exports.ConfigBuilder = ConfigBuilder;
// TODO: Use json2toml for writing configs to file
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQ29uZmlnQnVpbGRlci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9jb3JlL2xpYi9Db25maWdCdWlsZGVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQTs7OztHQUlHOzs7QUFJSCwrQkFBNEI7QUFLNUIsbUJBQW1CO0FBQ25CLGlFQUFpRTtBQUNqRSwrQkFBK0I7QUFFL0IsTUFBYSxhQUFhO0lBQ2pCLE9BQU8sR0FBVyxFQUFFLENBQUMsQ0FBQyx1QkFBdUI7SUFDN0MsUUFBUSxDQUFTO0lBQ2pCLE1BQU0sQ0FBVztJQUNqQixPQUFPLENBQVM7SUFDaEIsSUFBSSxDQUFXO0lBQ2YsRUFBRSxDQUFTO0lBRW5CLFlBQVksTUFBYztRQUN6QixJQUFJLENBQUMsRUFBRSxHQUFHLE1BQU0sQ0FBQyxLQUFLLEVBQUUsQ0FBQztRQUN6QixJQUFJLENBQUMsT0FBTyxHQUFHLE1BQU0sQ0FBQyxVQUFVLEVBQUUsQ0FBQztRQUVuQyxJQUFJLENBQUMsSUFBSSxHQUFHLElBQUEsV0FBSSxFQUFDLElBQUksQ0FBQyxPQUFPLEVBQUUsR0FBRyxJQUFJLENBQUMsRUFBRSxPQUFPLENBQUMsQ0FBQztRQUVsRCxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxHQUFHLDRDQUE0QyxDQUFDO1FBQzlELElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLEdBQUcsMEJBQTBCLElBQUksQ0FBQyxPQUFPLEVBQUUsQ0FBQztJQUMzRCxDQUFDO0NBNEVEO0FBNUZELHNDQTRGQztBQUNELGtEQUFrRCIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxyXG4gKiBNb2R1bGVzIEVudHJ5IEZpbGVcclxuICpcclxuICogQGZvcm1hdFxyXG4gKi9cclxuXHJcbi8qKioqKiBJbXBvcnRzICoqKioqL1xyXG5pbXBvcnQgVG9vbGtpdCBmcm9tIFwiLi4vLi5cIjtcclxuaW1wb3J0IHsgam9pbiB9IGZyb20gXCJwYXRoXCI7XHJcbmltcG9ydCB7IHBhcnNlIH0gZnJvbSBcInRvbWxcIjtcclxuaW1wb3J0IHsgUGF0aExpa2UgfSBmcm9tIFwiZnNcIjtcclxuaW1wb3J0IHsgTW9kdWxlIH0gZnJvbSBcIi4uLy4uLy4uL3NyYy9jb3JlL2xpYi9Nb2R1bGVcIjtcclxuXHJcbi8qKioqKiBTZXR1cCAqKioqKi9cclxuLy9jb25zdCBMb2dnZXIgPSBUb29sa2l0LkxvZ2dlci5Nb2RzLnNjb3BlKFwiQ29yZS9Db25maWdCdWlsZGVyXCIpO1xyXG4vL0xvZ2dlci5zdGFydChcIkluaXRpYWxpemluZ1wiKTtcclxuXHJcbmV4cG9ydCBjbGFzcyBDb25maWdCdWlsZGVyIHtcclxuXHRwcml2YXRlIFJvb3REaXI6IHN0cmluZyA9IFwiXCI7IC8vVG9vbGtpdC5QYXRocy5Db25maWc7XHJcblx0cHJpdmF0ZSBPcmlnaW5hbDogc3RyaW5nO1xyXG5cdHByaXZhdGUgZm9vdGVyOiBzdHJpbmdbXTtcclxuXHRwcml2YXRlIHZlcnNpb246IHN0cmluZztcclxuXHRwcml2YXRlIGZpbGU6IFBhdGhMaWtlO1xyXG5cdHByaXZhdGUgaWQ6IHN0cmluZztcclxuXHJcblx0Y29uc3RydWN0b3IobW9kdWxlOiBNb2R1bGUpIHtcclxuXHRcdHRoaXMuaWQgPSBtb2R1bGUuZ2V0SUQoKTtcclxuXHRcdHRoaXMudmVyc2lvbiA9IG1vZHVsZS5nZXRWZXJzaW9uKCk7XHJcblxyXG5cdFx0dGhpcy5maWxlID0gam9pbih0aGlzLlJvb3REaXIsIGAke3RoaXMuaWR9LnRvbWxgKTtcclxuXHJcblx0XHR0aGlzLmZvb3RlclswXSA9IGAjIEFOWSBFRElUUyBQQVNUIFRISVMgTElORSBNQVkgTk9UIEJFIEtFUFRgO1xyXG5cdFx0dGhpcy5mb290ZXJbMV0gPSBgTW9kdWxlL0NvbmZpZyBWZXJzaW9uOiAke3RoaXMudmVyc2lvbn1gO1xyXG5cdH1cclxuXHJcblx0Ly8gISBHQVJCQUdFIEJFTE9XIC8vXHJcblx0LypcclxuXHJcblx0Y29uc3RydWN0b3IobmFtZTogc3RyaW5nLCB2ZXJzaW9uOiBzdHJpbmcpIHtcclxuXHRcdGxldCBzcGxpdCA9IG5hbWUuc3BsaXQoXCIvXCIpO1xyXG5cdFx0dGhpcy5jb25maWdOYW1lID0gbmFtZSA9IHNwbGl0LnBvcCgpO1xyXG5cdFx0dGhpcy52ZXJzaW9uID0gdmVyc2lvbjtcclxuXHJcblx0XHR0aGlzLmNvbmZpZ0RpciA9IHBhdGguam9pbih0aGlzLmJhc2VDb25maWdEaXIsIHNwbGl0LmpvaW4oXCIvXCIpKTtcclxuXHRcdHRoaXMuY29udGVudHMgPSBgbW9kdWxlLmV4cG9ydHMgPSB7XFxuJHt0aGlzLmluZGVudH1fX01FVEE6IHtcXG4ke3RoaXMuaW5kZW50fSR7dGhpcy5pbmRlbnR9dmVyc2lvbjogJyR7dGhpcy52ZXJzaW9ufScsXFxuJHt0aGlzLmluZGVudH0ke3RoaXMuaW5kZW50fW5hbWU6ICcke3RoaXMuY29uZmlnTmFtZX0nXFxuJHt0aGlzLmluZGVudH19YDtcclxuXHR9XHJcblxyXG5cdFxyXG5cclxuXHRwcml2YXRlIHdyaXRlQ29uZmlnKCkge1xyXG5cdFx0bGV0IG5hbWUgPSBwYXRoLmpvaW4odGhpcy5jb25maWdEaXIsIHRoaXMuY29uZmlnTmFtZSk7XHJcblx0XHRpZiAoIWZzLmV4aXN0c1N5bmModGhpcy5jb25maWdEaXIpKSBmcy5ta2RpclN5bmModGhpcy5jb25maWdEaXIsIHsgcmVjdXJzaXZlOiB0cnVlIH0pO1xyXG5cdFx0aWYgKCFmcy5leGlzdHNTeW5jKGAke25hbWV9LmpzYCkpIGZzLndyaXRlRmlsZVN5bmMoYCR7bmFtZX0uanNgLCB0aGlzLmNvbnRlbnRzLCBcInV0ZjhcIik7XHJcblx0XHR0aGlzLmNvbmZpZ0ZpbGUgPSByZXF1aXJlKHBhdGguam9pbih0aGlzLmNvbmZpZ0RpciwgdGhpcy5jb25maWdOYW1lKSk7XHJcblx0XHRpZiAodGhpcy5jb25maWdGaWxlLl9fTUVUQS52ZXJzaW9uICE9IHRoaXMudmVyc2lvbikge1xyXG5cdFx0XHR0aGlzLmxvZ2dlci5ub3RlKFxyXG5cdFx0XHRcdGBUaGUgY29uZmlnIGZvciAke1xyXG5cdFx0XHRcdFx0dGhpcy5jb25maWdOYW1lXHJcblx0XHRcdFx0fSBpcyBvdXQgb2YgZGF0ZSFcXG5QbGVhc2UgYmFja3VwIGFueSBjaGFuZ2VzIHlvdSBoYXZlIG1hZGUsIGFuZCBkZWxldGUgdGhlIGNvbmZpZy5cXG5UaGUgbGF0ZXN0IHZlcnNpb24gb2YgdGhlIGNvbmZpZyB3aWxsIGJlIHJlZ2VuZXJhdGVkIG9uIHRoZSBuZXh0IHN0YXJ0dXAuXFxuTG9jYXRpb246ICR7cGF0aC5qb2luKFxyXG5cdFx0XHRcdFx0X19kaXJuYW1lLFxyXG5cdFx0XHRcdFx0bmFtZVxyXG5cdFx0XHRcdCl9YFxyXG5cdFx0XHQpO1xyXG5cdFx0fVxyXG5cdH1cclxuXHJcblx0cHVibGljIGFkZE9wdGlvbihuYW1lOiBzdHJpbmcsIHR5cGU6IHN0cmluZ1tdLCBjb21tZW50Pzogc3RyaW5nKTogdm9pZCB7XHJcblx0XHRpZiAobmFtZS5pbmNsdWRlcyhcIi9cIikpIHtcclxuXHRcdFx0bGV0IGxvb3BJbmRlbnQ6IHN0cmluZ1tdID0gW107XHJcblx0XHRcdGxldCBzcGxpdCA9IG5hbWUuc3BsaXQoXCIvXCIpO1xyXG5cdFx0XHRuYW1lID0gc3BsaXQucG9wKCk7XHJcblxyXG5cdFx0XHR3aGlsZSAoc3BsaXQubGVuZ3RoID4gMCkge1xyXG5cdFx0XHRcdGlmICghdGhpcy5jb250ZW50cy5lbmRzV2l0aChgIHtgKSAmJiAhdGhpcy5jb250ZW50cy5lbmRzV2l0aChcIiBcIikpXHJcblx0XHRcdFx0XHR0aGlzLmNvbnRlbnRzID0gdGhpcy5jb250ZW50cyArIGAsXFxuYDtcclxuXHRcdFx0XHRsb29wSW5kZW50LnB1c2godGhpcy5pbmRlbnQpO1xyXG5cdFx0XHRcdGxldCBpdGVtID0gc3BsaXQuc2hpZnQoKTtcclxuXHRcdFx0XHR0aGlzLmNvbnRlbnRzID0gdGhpcy5jb250ZW50cyArIGBcXG4ke2xvb3BJbmRlbnQuam9pbihcIlwiKX0ke2l0ZW19OiB7YDtcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0dGhpcy5hcHBlbmRPcHRpb24obG9vcEluZGVudC5qb2luKFwiXCIpICsgdGhpcy5pbmRlbnQsIG5hbWUsIHR5cGUsIGNvbW1lbnQpO1xyXG5cclxuXHRcdFx0d2hpbGUgKGxvb3BJbmRlbnQubGVuZ3RoID4gMCkge1xyXG5cdFx0XHRcdHRoaXMuY29udGVudHMgPSB0aGlzLmNvbnRlbnRzICsgYFxcbiR7bG9vcEluZGVudC5qb2luKFwiXCIpfX1gO1xyXG5cdFx0XHRcdGxvb3BJbmRlbnQucG9wKCk7XHJcblx0XHRcdH1cclxuXHRcdH0gZWxzZSB7XHJcblx0XHRcdHRoaXMuYXBwZW5kT3B0aW9uKHRoaXMuaW5kZW50LCBuYW1lLCB0eXBlLCBjb21tZW50KTtcclxuXHRcdH1cclxuXHR9XHJcblxyXG5cdHByaXZhdGUgYXBwZW5kT3B0aW9uKGluZGVudCwgbmFtZSwgdHlwZSwgY29tbWVudCkge1xyXG5cdFx0aWYgKCF0aGlzLmNvbnRlbnRzLmVuZHNXaXRoKGAge2ApICYmICF0aGlzLmNvbnRlbnRzLmVuZHNXaXRoKFwiIFwiKSlcclxuXHRcdFx0dGhpcy5jb250ZW50cyA9IHRoaXMuY29udGVudHMgKyBgLFxcbiR7aW5kZW50fWA7XHJcblx0XHR0aGlzLmNvbnRlbnRzID1cclxuXHRcdFx0dGhpcy5jb250ZW50cyArXHJcblx0XHRcdGBcXG4ke2luZGVudH0vKipcXG4ke2luZGVudH0gKiBAcHJvcGVydHkgeyR7dHlwZS5qb2luKFwiIHwgXCIpfX0gJHtuYW1lfVxcbiR7aW5kZW50fSAqIEBkZWZhdWx0IHVuZGVmaW5lZGA7XHJcblx0XHRpZiAoY29tbWVudCkgdGhpcy5jb250ZW50cyA9IHRoaXMuY29udGVudHMgKyBgXFxuJHtpbmRlbnR9ICogQGRlc2NyaXB0aW9uICR7Y29tbWVudH1cXG4ke2luZGVudH0gKiAvYDtcclxuXHRcdHRoaXMuY29udGVudHMgPSB0aGlzLmNvbnRlbnRzICsgYFxcbiR7aW5kZW50fSR7bmFtZX06IHVuZGVmaW5lZGA7XHJcblx0fVxyXG5cclxuXHRwdWJsaWMgY2xvc2UoKSB7XHJcblx0XHR0aGlzLmNvbnRlbnRzID0gdGhpcy5jb250ZW50cyArIFwiXFxufVwiO1xyXG5cdFx0dGhpcy53cml0ZUNvbmZpZygpO1xyXG5cdH1cclxuXHJcblx0cHVibGljIGdldENvbmZpZygpIHtcclxuXHRcdHJldHVybiB0aGlzLmNvbmZpZ0ZpbGU7XHJcblx0fSovXHJcbn1cclxuLy8gVE9ETzogVXNlIGpzb24ydG9tbCBmb3Igd3JpdGluZyBjb25maWdzIHRvIGZpbGVcclxuIl19