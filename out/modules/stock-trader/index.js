"use strict";
/**
 * Stock Trader Entry File
 *
 * @format
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
/***** Imports *****/
const puppeteer_1 = __importDefault(require("puppeteer"));
const tk_module_json_1 = require("./tk-module.json");
const Sleep_1 = __importDefault(require("../../core/utils/Sleep"));
const OrderMaker_1 = __importDefault(require("../../../src/modules/stock-trader/OrderMaker"));
const Module_1 = require("../../../src/core/lib/Module");
const ElementAbuse_1 = require("../../../src/modules/stock-trader/ElementAbuse");
const QueryStrings_json_1 = require("../../../src/modules/stock-trader/QueryStrings.json");
/***** Setup *****/
class StockTrader extends Module_1.Module {
    config = this._config.getConfig();
    logger = this.Logger.scope("Mods.StockTrader");
    constructor() {
        super(tk_module_json_1.meta.name, tk_module_json_1.meta.id, tk_module_json_1.meta.version, tk_module_json_1.meta.type, tk_module_json_1.meta.requires);
        this.logger.start(`Initializing ${tk_module_json_1.meta.name}`);
        this.logger.info(`Module Version: ${tk_module_json_1.meta.version}`);
        this.logger.info(`Module ID: ${tk_module_json_1.meta.id}`);
        this.startTime(this._name); // Start logger timer without timer auto log
        this.setupPuppeteer().then((_) => {
            this.logger.complete(`Spawned. Took ${this.stopTime().span}ms. Closing Puppet...`);
        });
    }
    startTime(label) {
        this.logger.disable();
        this.logger.time(label);
        this.logger.enable();
    }
    stopTime() {
        let time;
        this.logger.disable();
        time = this.logger.timeEnd();
        this.logger.enable();
        return time;
    }
    async setupPuppeteer() {
        this.logger.info(`Launching Puppet...`);
        const Browser = await puppeteer_1.default.launch({ headless: this.config.Puppet.headless });
        let Pages = await Browser.pages();
        this.logger.info(`Changing Viewport Size to 1000x850...`);
        await Pages[0].setViewport({
            width: 1000,
            height: 850,
        });
        await this.loginToTradingView(Browser);
        this.logger.await(`Logging into TradingView...`);
    }
    async loginToTradingView(browser) {
        let self = this, page = await browser.pages(), QS = QueryStrings_json_1.Login.TradingView;
        this.logger.pending(`Heading to ${this.config.Puppet.initLink}`);
        page[0].goto(this.config.Puppet.initLink).then(execute);
        async function execute() {
            await (0, ElementAbuse_1.clickEl)(QS.button.UserMenu, page[0]);
            await (0, ElementAbuse_1.clickEl)(QS.button.SignIn, page[0]);
            await (0, ElementAbuse_1.clickEl)(QS.button.Email, page[0]);
            await (0, ElementAbuse_1.typeEl)(QS.input.Username, page[0], self.config.Auth.TradingView.user);
            await (0, ElementAbuse_1.typeEl)(QS.input.Password, page[0], self.config.Auth.TradingView.pass);
            await (0, ElementAbuse_1.clickEl)(QS.button.Submit, page[0]);
            (0, Sleep_1.default)(2000);
            self.logger.await(`Opening Orders...`);
            await self.loginToBroker(browser);
        }
        //execute.name;
    }
    async loginToBroker(browser) {
        let self = this, page = await browser.pages(), QS = QueryStrings_json_1.Login.Broker;
        this.logger.pending(`Heading to ${this.config.Puppet.chartLink}`);
        page[0].goto(this.config.Puppet.chartLink).then(execute);
        async function execute() {
            try {
                page[0].$(QS.grid.OrderPanel);
            }
            catch (e) {
                self.logger.error(`Order Button was already button somehow ???\n${e}`);
                (0, ElementAbuse_1.clickEl)(QS.button.OrderPanel, page[0]);
            }
            finally {
                (0, Sleep_1.default)(3000);
                await (await page[0].$(QS.grid.EightCap)).hover();
                (0, Sleep_1.default)(500);
                await (0, ElementAbuse_1.clickEl)(QS.button.EightCap, page[0]);
                await (0, ElementAbuse_1.typeEl)(QS.input.Username, page[0], self.config.Auth.EightCap.user);
                await (0, ElementAbuse_1.typeEl)(QS.input.Password, page[0], self.config.Auth.EightCap.pass);
                await (0, ElementAbuse_1.clickEl)(QS.button.Submit, page[0]);
            }
            (0, Sleep_1.default)(4000);
            new OrderMaker_1.default(page[0], self.logger).buy().order("stoplimit").lots(1).setValue(6, 10000).setValue(0, 12000);
            //execute.name;
        }
    }
}
new StockTrader();
//# sourceMappingURL=data:application/json;base64,