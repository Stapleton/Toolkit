/** @format */

import { join } from "path";
import { Signale } from "signale";
import Sleep from "./core/utils/Sleep";
import { SignaleOpts } from "./TKOpts";
import { existsSync, writeFileSync } from "fs";
import { ChildProcess, fork, exec, ForkOptions } from "child_process";
import { Module, IModConfig, __TKConfigs } from "./core/lib/Module";

export type ToolkitDomain = "api" | "app" | "core" | "module";

interface ToolkitConfig extends IModConfig {}

/***** Setup Toolkit *****/
class Toolkit {
	private static INSTANCE: Toolkit;

	private moduleWaitTime = 100;
	private abortController = new AbortController();

	public Modules = __TKConfigs;
	public Configs = __TKConfigs;
	public Workers: Map<ToolkitDomain, ChildProcess> = new Map();

	public Paths = {
		Config: `${process.cwd()}\\config`,
		Api: `${process.cwd()}\\src\\api`,
		App: `${process.cwd()}\\src\\app`,
		Core: `${process.cwd()}\\src\\core`,
		Mods: `${process.cwd()}\\src\\modules`,
	};

	public Logger = {
		Global: new Signale(SignaleOpts),
		Api: new Signale(SignaleOpts).scope("Api"),
		App: new Signale(SignaleOpts).scope("App"),
		Core: new Signale(SignaleOpts).scope("Core"),
		Mods: new Signale(SignaleOpts).scope("Mods"),
	};

	public static getInstance() {
		if (!this.INSTANCE) {
			this.INSTANCE = new Toolkit();
		}
		return this.INSTANCE;
	}

	private constructor() {
		this.Logger.Global.start("Starting Toolkit!");

		this.checkAuth();

		try {
			this.electronApp();
		} catch (e) {
			this.Logger.Global.error(e);
		}
		Sleep(this.moduleWaitTime);

		this.startToolkitLibrary("api", "./src/api/index.ts");
		Sleep(this.moduleWaitTime);

		this.startToolkitLibrary("core", "./src/core/index.ts");
		Sleep(this.moduleWaitTime);

		this.startToolkitLibrary("module", "./src/modules/index.ts");
		Sleep(this.moduleWaitTime);
	}

	private checkAuth() {
		let p = join(this.Paths.Config, "auth.json");

		if (!existsSync(p)) {
			writeFileSync(p, "{}", "utf-8");
			this.Logger.Core.star(`Created new auth.json in config folder!`);
		}
	}

	private electronApp() {
		function handler(error: Error, stdout: string | Buffer, stderr: string | Buffer) {}

		let app = exec('NODE_OPTIONS="--import tsx" electron ./src/app/index.ts', { windowsHide: true }, handler);

		this.Workers.set("app", app);
	}

	private startToolkitLibrary(tkLibID: ToolkitDomain, tkLibPath: string) {
		const { signal } = this.abortController;
		const forkOpts = <ForkOptions>{
			serialization: "advanced",
			signal,
		};

		try {
			this.Workers.set(tkLibID, fork(tkLibPath, forkOpts));
		} catch (e) {
			this.Logger.Global.error(e);
		}
	}
}

const TK = Toolkit.getInstance();

export default TK;
